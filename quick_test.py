#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""
import requests
import sys
import os
import json

def quick_test(base_url, api_key):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API"""
    url = f"{base_url}/planets"
    headers = {"X-API-Key": api_key}
    params = {
        "datetime_str": "2024-01-15T12:00:00",
        "lat": 55.7558,
        "lon": 37.6176
    }
    
    print(f"üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç: {url}")
    
    try:
        response = requests.get(url, headers=headers, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ {len(data.get('planets', []))} –ø–ª–∞–Ω–µ—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        return False

def test_natal_chart(base_url, api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    url = f"{base_url}/natal_chart"
    headers = {
        "X-API-Key": api_key,
        "Content-Type": "application/json"
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    payload = {
        "year": 1990,
        "month": 6,
        "day": 15,
        "hour": 14,
        "minute": 30,
        "city": "–ú–æ—Å–∫–≤–∞",
        "nation": "–†–æ—Å—Å–∏—è",
        "lat": 55.7558,
        "lon": 37.6176,
        "timezone": "UTC"
    }
    
    print(f"üåü –¢–µ—Å—Ç –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: {url}")
    print(f"üìã –î–∞–Ω–Ω—ã–µ: {payload['year']}-{payload['month']:02d}-{payload['day']:02d}")
    
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –æ—Ç–≤–µ—Ç–∞
            planets_count = len(data.get('planets', {}))
            houses_count = len(data.get('houses', []))
            aspects_count = len(data.get('aspects', []))
            
            print(f"‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üìç –ü–ª–∞–Ω–µ—Ç: {planets_count}")
            print(f"   üè† –î–æ–º–æ–≤: {houses_count}")
            print(f"   üîó –ê—Å–ø–µ–∫—Ç–æ–≤: {aspects_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä—É–≥–∞
            chart_data = data.get('chart_data', {})
            if chart_data:
                print(f"   üéØ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: ‚úÖ")
                print(f"       - –ö—Ä—É–≥ –∑–æ–¥–∏–∞–∫–∞: {len(chart_data.get('inner_circle', []))} –∑–Ω–∞–∫–æ–≤")
                print(f"       - –ö—Ä—É–≥ –¥–æ–º–æ–≤: {len(chart_data.get('houses_circle', []))} –¥–æ–º–æ–≤") 
                print(f"       - –ü–ª–∞–Ω–µ—Ç—ã: {len(chart_data.get('planets_circle', []))} –ø–ª–∞–Ω–µ—Ç")
                print(f"       - –õ–∏–Ω–∏–∏ –∞—Å–ø–µ–∫—Ç–æ–≤: {len(chart_data.get('aspects_lines', []))} –ª–∏–Ω–∏–π")
            else:
                print(f"   üéØ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: ‚ùå")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = data.get('statistics', {})
            if stats:
                print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                elements = stats.get('elements_distribution', {})
                for element, count in elements.items():
                    print(f"       - {element}: {count}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        return False

def comprehensive_test(base_url, api_key):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("=" * 50)
    
    success_count = 0
    total_tests = 2
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
    if quick_test(base_url, api_key):
        success_count += 1
    
    print()
    
    # –¢–µ—Å—Ç –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    if test_natal_chart(base_url, api_key):
        success_count += 1
    
    print()
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return False

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python quick_test.py <URL_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è> [—Ä–µ–∂–∏–º]")
        print("–ü—Ä–∏–º–µ—Ä: python quick_test.py https://your-app.railway.app")
        print("–ü—Ä–∏–º–µ—Ä: python quick_test.py https://your-app.railway.app natal")
        print("–ü—Ä–∏–º–µ—Ä: python quick_test.py https://your-app.railway.app full")
        sys.exit(1)
    
    base_url = sys.argv[1].rstrip('/')
    mode = sys.argv[2] if len(sys.argv) > 2 else "quick"
    api_key = os.getenv("API_KEY", "YOUR_API_KEY_HERE")  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ
    
    if mode == "natal":
        success = test_natal_chart(base_url, api_key)
    elif mode == "full":
        success = comprehensive_test(base_url, api_key)
    else:
        success = quick_test(base_url, api_key)
    
    sys.exit(0 if success else 1)
