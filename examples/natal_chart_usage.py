#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
API_KEY = "your-api-key-here"       # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á

def create_natal_chart(year, month, day, hour, minute, city, nation, lat, lon, timezone=None):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ API
    
    Args:
        year: –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è
        month: –ú–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è
        day: –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
        hour: –ß–∞—Å —Ä–æ–∂–¥–µ–Ω–∏—è
        minute: –ú–∏–Ω—É—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        city: –ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è
        nation: –°—Ç—Ä–∞–Ω–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        lat: –®–∏—Ä–æ—Ç–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        lon: –î–æ–ª–≥–æ—Ç–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        timezone: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    url = f"{BASE_URL}/natal_chart"
    headers = {
        "X-API-Key": API_KEY,
        "Content-Type": "application/json"
    }
    
    payload = {
        "year": year,
        "month": month,
        "day": day,
        "hour": hour,
        "minute": minute,
        "city": city,
        "nation": nation,
        "lat": lat,
        "lon": lon
    }
    
    if timezone:
        payload["timezone"] = timezone
    
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=15)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ API {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def display_natal_chart_summary(chart_data):
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    
    Args:
        chart_data: –î–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –æ—Ç API
    """
    if not chart_data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    subject_info = chart_data.get("subject_info", {})
    planets = chart_data.get("planets", {})
    houses = chart_data.get("houses", [])
    aspects = chart_data.get("aspects", [])
    statistics = chart_data.get("statistics", {})
    
    print("=" * 60)
    print("üåü –ù–ê–¢–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê")
    print("=" * 60)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∂–¥–µ–Ω–∏–∏
    print(f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {subject_info.get('birth_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"üïê –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {subject_info.get('birth_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"üìç –ú–µ—Å—Ç–æ: {subject_info.get('location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"üåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {subject_info.get('coordinates', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print()
    
    # –ü–ª–∞–Ω–µ—Ç—ã
    print("ü™ê –ü–õ–ê–ù–ï–¢–´:")
    print("-" * 40)
    for planet_name, planet_info in planets.items():
        symbol = planet_info.get("symbol", "")
        sign = planet_info.get("sign", "")
        sign_symbol = planet_info.get("sign_symbol", "")
        degrees = planet_info.get("degrees_in_sign", 0)
        house = planet_info.get("house", 0)
        retrograde = " ‚Ñû" if planet_info.get("retrograde", False) else ""
        
        print(f"{symbol} {planet_name:12} –≤ {sign_symbol} {sign:12} {degrees:6.2f}¬∞ (–î–æ–º {house}){retrograde}")
    
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
    if statistics:
        elements = statistics.get("elements_distribution", {})
        qualities = statistics.get("qualities_distribution", {})
        
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 40)
        print("–≠–ª–µ–º–µ–Ω—Ç—ã:")
        for element, count in elements.items():
            print(f"  {element:8}: {count} –ø–ª–∞–Ω–µ—Ç")
        
        print("–ö–∞—á–µ—Å—Ç–≤–∞:")
        for quality, count in qualities.items():
            print(f"  {quality:8}: {count} –ø–ª–∞–Ω–µ—Ç")
        
        print()
    
    # –ú–∞–∂–æ—Ä–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã
    major_aspects = [a for a in aspects if a.get("is_major", False)]
    if major_aspects:
        print(f"üîó –ú–ê–ñ–û–†–ù–´–ï –ê–°–ü–ï–ö–¢–´ ({len(major_aspects)}):")
        print("-" * 40)
        for aspect in major_aspects[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            planet1 = aspect.get("planet1", "")
            planet2 = aspect.get("planet2", "")
            aspect_name = aspect.get("aspect", "")
            orb = aspect.get("orb", 0)
            
            print(f"{planet1:12} {aspect_name:12} {planet2:12} (–æ—Ä–±: {orb:.2f}¬∞)")
        
        if len(major_aspects) > 10:
            print(f"... –∏ –µ—â—ë {len(major_aspects) - 10} –∞—Å–ø–µ–∫—Ç–æ–≤")

def display_chart_data_structure(chart_data):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    
    Args:
        chart_data: –î–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –æ—Ç API
    """
    if not chart_data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    chart_visual_data = chart_data.get("chart_data", {})
    
    print("\n" + "=" * 60)
    print("üéØ –î–ê–ù–ù–´–ï –î–õ–Ø –ü–û–°–¢–†–û–ï–ù–ò–Ø –ö–†–£–ì–û–í–û–ô –î–ò–ê–ì–†–ê–ú–ú–´")
    print("=" * 60)
    
    # –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ –∑–æ–¥–∏–∞–∫–∞
    inner_circle = chart_visual_data.get("inner_circle", [])
    print(f"üî∏ –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ –∑–æ–¥–∏–∞–∫–∞: {len(inner_circle)} –∑–Ω–∞–∫–æ–≤")
    if inner_circle:
        print("   –ó–Ω–∞–∫–∏:", ", ".join([f"{s['symbol']} {s['name']}" for s in inner_circle[:4]]), "...")
    
    # –ö—Ä—É–≥ –¥–æ–º–æ–≤
    houses_circle = chart_visual_data.get("houses_circle", [])
    print(f"üî∏ –ö—Ä—É–≥ –¥–æ–º–æ–≤: {len(houses_circle)} –¥–æ–º–æ–≤")
    if houses_circle:
        print(f"   –ü–µ—Ä–≤—ã–π –¥–æ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {houses_circle[0].get('start_angle', 0):.1f}¬∞")
    
    # –ü–ª–∞–Ω–µ—Ç—ã –Ω–∞ –∫—Ä—É–≥–µ
    planets_circle = chart_visual_data.get("planets_circle", [])
    print(f"üî∏ –ü–ª–∞–Ω–µ—Ç—ã –Ω–∞ –∫—Ä—É–≥–µ: {len(planets_circle)} –ø–ª–∞–Ω–µ—Ç")
    if planets_circle:
        first_planet = planets_circle[0]
        print(f"   –ü–µ—Ä–≤–∞—è –ø–ª–∞–Ω–µ—Ç–∞: {first_planet.get('symbol', '')} {first_planet.get('name', '')} –Ω–∞ {first_planet.get('angle', 0):.1f}¬∞")
    
    # –õ–∏–Ω–∏–∏ –∞—Å–ø–µ–∫—Ç–æ–≤
    aspect_lines = chart_visual_data.get("aspects_lines", [])
    print(f"üî∏ –õ–∏–Ω–∏–∏ –∞—Å–ø–µ–∫—Ç–æ–≤: {len(aspect_lines)} –ª–∏–Ω–∏–π")
    if aspect_lines:
        print("   –¢–∏–ø—ã –∞—Å–ø–µ–∫—Ç–æ–≤:", ", ".join(set([a.get('aspect_type', '') for a in aspect_lines])))
    
    print("\nüí° –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã")
    print("   —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (matplotlib, plotly, d3.js –∏ –¥—Ä.)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç")
    print()
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω)
    year = 1940
    month = 10
    day = 9
    hour = 18
    minute = 30
    city = "–õ–∏–≤–µ—Ä–ø—É–ª—å"
    nation = "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"
    lat = 53.4084
    lon = -2.9916
    timezone = "+00:00"
    
    print(f"üìã –°–æ–∑–¥–∞—ë–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É")
    print(f"üìÖ –î–∞—Ç–∞: {year}-{month:02d}-{day:02d} {hour:02d}:{minute:02d}")
    print(f"üìç –ú–µ—Å—Ç–æ: {city}, {nation}")
    print()
    
    # –°–æ–∑–¥–∞—ë–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
    chart_data = create_natal_chart(
        year=year, 
        month=month,
        day=day,
        hour=hour,
        minute=minute,
        city=city,
        nation=nation,
        lat=lat,
        lon=lon,
        timezone=timezone
    )
    
    if chart_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        display_natal_chart_summary(chart_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        display_chart_data_structure(chart_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        with open("natal_chart_example.json", "w", encoding="utf-8") as f:
            json.dump(chart_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª 'natal_chart_example.json'")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ API —Å–µ—Ä–≤–µ—Ä")
        print("   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ API –∫–ª—é—á")
        print("   3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ kerykeion")

if __name__ == "__main__":
    main()
