#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Ephemeris Decoder API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
"""

import requests
import json
from datetime import datetime


class EphemerisAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ephemeris Decoder API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""

    def __init__(self, base_url="http://localhost:8000", api_key=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞

        Args:
            base_url: URL API —Å–µ—Ä–≤–µ—Ä–∞
            api_key: API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        self.base_url = base_url.rstrip('/')
        self.api_key = api_key
        self.session = requests.Session()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if self.api_key:
            self.session.headers.update({"X-API-Key": self.api_key})
    
    def get_planets(self, dt, lat, lon, extra=False):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç"""
        params = {
            "datetime": dt,
            "lat": lat,
            "lon": lon,
            "extra": extra
        }

        response = self.session.get(f"{self.base_url}/planets", params=params)
        response.raise_for_status()
        return response.json()

    def get_aspects(self, dt, lat, lon):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏"""
        params = {
            "datetime": dt,
            "lat": lat,
            "lon": lon
        }

        response = self.session.get(f"{self.base_url}/aspects", params=params)
        response.raise_for_status()
        return response.json()

    def get_houses(self, dt, lat, lon):
        """–ü–æ–ª—É—á–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–º–æ–≤"""
        params = {
            "datetime": dt,
            "lat": lat,
            "lon": lon
        }

        response = self.session.get(f"{self.base_url}/houses", params=params)
        response.raise_for_status()
        return response.json()

    def get_moon_phase(self, dt):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–∑—É –õ—É–Ω—ã"""
        params = {"datetime": dt}

        response = self.session.get(f"{self.base_url}/moon_phase", params=params)
        response.raise_for_status()
        return response.json()

    def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"""
        response = self.session.get(f"{self.base_url}/health")
        response.raise_for_status()
        return response.json()

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã (—Ç—Ä–µ–±—É—é—Ç ADMIN –ø—Ä–∞–≤)
    def create_api_key(self, name, permissions="read", expires_days=None, rate_limit=100):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π API –∫–ª—é—á (—Ç—Ä–µ–±—É–µ—Ç ADMIN –ø—Ä–∞–≤)"""
        params = {
            "name": name,
            "permissions": permissions,
            "rate_limit": rate_limit
        }
        if expires_days:
            params["expires_days"] = expires_days

        response = self.session.post(f"{self.base_url}/admin/keys", params=params)
        response.raise_for_status()
        return response.json()

    def list_api_keys(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö API –∫–ª—é—á–µ–π (—Ç—Ä–µ–±—É–µ—Ç ADMIN –ø—Ä–∞–≤)"""
        response = self.session.get(f"{self.base_url}/admin/keys")
        response.raise_for_status()
        return response.json()

    def revoke_api_key(self, key_id):
        """–û—Ç–∑—ã–≤–∞–µ—Ç API –∫–ª—é—á (—Ç—Ä–µ–±—É–µ—Ç ADMIN –ø—Ä–∞–≤)"""
        response = self.session.delete(f"{self.base_url}/admin/keys/{key_id}")
        response.raise_for_status()
        return response.json()

    def set_api_key(self, api_key):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π API –∫–ª—é—á –¥–ª—è —Å–µ—Å—Å–∏–∏"""
        self.api_key = api_key
        self.session.headers.update({"X-API-Key": self.api_key})


def print_json(data, title):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç JSON –¥–∞–Ω–Ω—ã–µ"""
    print(f"\n{'='*50}")
    print(f" {title}")
    print(f"{'='*50}")
    print(json.dumps(data, indent=2, ensure_ascii=False))


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    print("üåü –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Ephemeris Decoder API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")

    # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ-–∫–ª—é—á–∞
    print("\nüîë –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-API –∫–ª—é—á–∞...")
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–∫–ª—é—á–∞
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

        from utils.auth import generate_demo_key

        demo_key = generate_demo_key()
        print(f"‚úÖ –î–µ–º–æ-–∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {demo_key[:20]}...")

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç —Å API –∫–ª—é—á–æ–º
        client = EphemerisAPIClient(api_key=demo_key)

    except ImportError:
        print("‚ö†Ô∏è  –î–µ–º–æ-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
        print("–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–∫–ª—é—á–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python utils/auth.py")

        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ API –∫–ª—é—á
        demo_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á: ").strip()
        if not demo_key:
            print("‚ùå API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –í—ã—Ö–æ–¥.")
            return

        client = EphemerisAPIClient(api_key=demo_key)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_datetime = "2024-01-15T12:00:00"
    test_lat = 55.7558  # –ú–æ—Å–∫–≤–∞
    test_lon = 37.6176

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
        health = client.health_check()
        print_json(health, "Health Check")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ)
        print("\nü™ê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç...")
        planets = client.get_planets(test_datetime, test_lat, test_lon, extra=False)
        print_json(planets, "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
        print("\nüîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç –∏ —Ç–æ—á–µ–∫...")
        planets_extra = client.get_planets(test_datetime, test_lat, test_lon, extra=True)
        print_json(planets_extra, "–í—Å–µ –ø–ª–∞–Ω–µ—Ç—ã –∏ —Ç–æ—á–∫–∏")

        # –ü–æ–ª—É—á–∞–µ–º –∞—Å–ø–µ–∫—Ç—ã
        print("\nüìê –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Å–ø–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏...")
        aspects = client.get_aspects(test_datetime, test_lat, test_lon)
        print_json(aspects, "–ê—Å–ø–µ–∫—Ç—ã")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞
        print("\nüè† –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –¥–æ–º–æ–≤...")
        houses = client.get_houses(test_datetime, test_lat, test_lon)
        print_json(houses, "–î–æ–º–∞")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∑—É –õ—É–Ω—ã
        print("\nüåô –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∑—ã –õ—É–Ω—ã...")
        moon_phase = client.get_moon_phase(test_datetime)
        print_json(moon_phase, "–§–∞–∑–∞ –õ—É–Ω—ã")

        # –ü—Ä–∏–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å ADMIN –ø—Ä–∞–≤–∞)
        print("\nüëë –ü—Ä–∏–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        try:
            keys_stats = client.list_api_keys()
            print_json(keys_stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –∫–ª—é—á–µ–π")

            print("\n‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã!")

        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 403:
                print("‚ÑπÔ∏è  –£ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤.")
                print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á —Å ADMIN –ø—Ä–∞–≤–∞–º–∏.")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º: {e}")

    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 401:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á.")
        elif e.response.status_code == 429:
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π API –∫–ª—é—á.")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API.")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python run_local.py")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


def demo_admin_functions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üëë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 50)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥–º–∏–Ω-–∫–ª—é—á
    admin_key = input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á —Å ADMIN –ø—Ä–∞–≤–∞–º–∏: ").strip()
    if not admin_key:
        print("‚ùå –ê–¥–º–∏–Ω-–∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return

    client = EphemerisAPIClient(api_key=admin_key)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª—é—á–µ–π
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API –∫–ª—é—á–µ–π...")
        stats = client.list_api_keys()
        print_json(stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
        print("\nüîë –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞...")
        new_key_response = client.create_api_key(
            name="Test App",
            permissions="read,write",
            expires_days=7,
            rate_limit=500
        )
        print_json(new_key_response, "–ù–æ–≤—ã–π API –∫–ª—é—á")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if "api_key" in new_key_response:
            new_key = new_key_response["api_key"]
            print(f"\nüí° –ù–æ–≤—ã–π –∫–ª—é—á: {new_key}")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API!")

    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 403:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1 and sys.argv[1] == "--admin":
        demo_admin_functions()
    else:
        main()
        print("\n" + "="*50)
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python examples/api_usage.py --admin")


