#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Ephemeris Decoder API –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
"""
import requests
import json
from datetime import datetime, timezone
import sys
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = os.getenv("API_KEY", "YOUR_API_KEY_HERE")  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ
BASE_URL = "https://ephemerisdecoder.up.railway.app"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ï –†–ï–ê–õ–¨–ù–û–ï URL

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
HEADERS = {
    "X-API-Key": API_KEY,
    "Content-Type": "application/json"
}

def test_endpoint(url, description):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description}")
    print(f"üì° URL: {url}")
    
    try:
        response = requests.get(url, headers=HEADERS, timeout=30)
        
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"üì¶ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(json.dumps(data))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
            if "planets" in data:
                print(f"ü™ê –ü–ª–∞–Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ: {len(data['planets'])}")
            elif "aspects" in data:
                print(f"üîó –ê—Å–ø–µ–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(data['aspects'])}")
            elif "houses" in data:
                print(f"üè† –î–æ–º–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(data['houses'])}")
            elif "phase" in data:
                print(f"üåô –§–∞–∑–∞ –ª—É–Ω—ã: {data['phase']['name']} ({data['phase']['illumination']:.1f}%)")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            try:
                error_data = response.json()
                print(f"üí¨ –û—Ç–≤–µ—Ç: {error_data}")
            except:
                print(f"üí¨ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫)")
        return False
    except requests.exceptions.ConnectionError:
        print("üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üöÄ –ü–†–û–í–ï–†–ö–ê EPHEMERIS DECODER API –ù–ê –ü–†–û–î–ê–ö–®–ï–ù–ï")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if "YOUR_API_KEY_HERE" in API_KEY:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á!")
        print("   –°–ø–æ—Å–æ–± 1: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: set API_KEY=–≤–∞—à_–∫–ª—é—á")
        print("   –°–ø–æ—Å–æ–± 2: –ó–∞–º–µ–Ω–∏—Ç–µ API_KEY –≤ –∫–æ–¥–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á")
        return
    
    if "your-railway-app-url" in BASE_URL:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –ó–∞–º–µ–Ω–∏—Ç–µ BASE_URL –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway!")
        print("   –ù–∞–π–¥–∏—Ç–µ URL –≤ Railway Dashboard -> –í–∞—à –ø—Ä–æ–µ–∫—Ç -> Settings -> Domains")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ú–æ—Å–∫–≤–∞, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
    test_datetime = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S")
    lat, lon = 55.7558, 37.6176  # –ú–æ—Å–∫–≤–∞
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    base_params = f"datetime_str={test_datetime}&lat={lat}&lon={lon}"
    
    tests = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        (f"{BASE_URL}/planets?{base_params}", "–ü–ª–∞–Ω–µ—Ç—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ)"),
        (f"{BASE_URL}/planets?{base_params}&extra=true", "–ü–ª–∞–Ω–µ—Ç—ã (—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏)"),
        (f"{BASE_URL}/aspects?{base_params}", "–ê—Å–ø–µ–∫—Ç—ã"),
        (f"{BASE_URL}/houses?{base_params}", "–î–æ–º–∞"),
        (f"{BASE_URL}/moon_phase?{base_params}", "–§–∞–∑–∞ –õ—É–Ω—ã"),
        
        # –¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
        (f"{BASE_URL}/planets?{base_params}", "–ü–ª–∞–Ω–µ—Ç—ã (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Ç–µ—Å—Ç –∫–µ—à–∞)"),
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    successful = 0
    total = len(tests)
    
    for url, description in tests:
        if test_endpoint(url, description):
            successful += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful}/{total}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total - successful}/{total}")
    
    if successful == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    elif successful > 0:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
    else:
        print("üí• –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("   2. –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –Ω–∞ Railway")
        print("   3. –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    print("\nüí° –ü–û–õ–ï–ó–ù–´–ï –°–û–í–ï–¢–´:")
    print("   ‚Ä¢ –õ–æ–≥–∏ Railway: Dashboard -> –í–∞—à –ø—Ä–æ–µ–∫—Ç -> Deployments -> View Logs")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: Dashboard -> –í–∞—à –ø—Ä–æ–µ–∫—Ç (–∑–µ–ª–µ–Ω—ã–π = —Ä–∞–±–æ—Ç–∞–µ—Ç)")
    print(f"   ‚Ä¢ –í–∞—à API –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω —Å –ª–∏–º–∏—Ç–æ–º 100,000 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å")
    print("   ‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö 401/403 –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")

if __name__ == "__main__":
    main()
