"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Ephemeris Decoder
"""

from datetime import datetime
from typing import Optional, Dict, Any
from fastapi import FastAPI, HTTPException, Query, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, field_validator
from contextlib import asynccontextmanager
import uvicorn
import asyncio
from functools import lru_cache

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.ephem import (
    get_planets, get_aspects, get_houses, get_moon_phase,
    initialize_ephemeris, cleanup_ephemeris
)
from services.natal_chart import (
    calculate_natal_chart, validate_birth_data, get_timezone_by_coordinates
)
from services.astrology_calculations import (
    TransitCalculator, SynastryCalculator, ReturnCalculator,
    DirectionCalculator, ArabicPartsCalculator, AstrologicalUtilities
)

# –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
from utils.auth import APIKeyManager, APIKeyPermission, key_manager
from utils.middleware import (
    AuthenticationMiddleware,
    RateLimitMiddleware,
    SecurityHeadersMiddleware,
    require_read_permission,
    require_admin_permission
)

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ============================================================================

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
APP_CONFIG = {
    "title": "Ephemeris Decoder",
    "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤",
    "version": "2.0.0",
    "docs_url": "/docs",
    "redoc_url": "/redoc",
    "rate_limit": 200,  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 100 –¥–æ 200
    "cache_ttl": 3600,   # 1 —á–∞—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
}

# –ö–µ—à –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
_response_cache: Dict[str, Any] = {}
_cache_timestamps: Dict[str, datetime] = {}

# ============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# ============================================================================

class DateTimeQuery(BaseModel):
    datetime: str

    @field_validator('datetime')
    @classmethod
    def validate_datetime(cls, v):
        try:
            datetime.fromisoformat(v.replace('Z', '+00:00'))
            return v
        except ValueError:
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç datetime. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ISO 8601 (YYYY-MM-DDTHH:MM:SS)')

class CoordinatesQuery(BaseModel):
    lat: float
    lon: float

    @field_validator('lat')
    @classmethod
    def validate_lat(cls, v):
        if not -90 <= v <= 90:
            raise ValueError('–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -90 –¥–æ 90 –≥—Ä–∞–¥—É—Å–æ–≤')
        return v

    @field_validator('lon')
    @classmethod
    def validate_lon(cls, v):
        if not -180 <= v <= 180:
            raise ValueError('–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -180 –¥–æ 180 –≥—Ä–∞–¥—É—Å–æ–≤')
        return v

class NatalChartRequest(BaseModel):
    year: int
    month: int
    day: int
    hour: int
    minute: int
    city: str
    nation: str
    lat: float
    lon: float
    timezone: Optional[str] = None

    @field_validator('year')
    @classmethod
    def validate_year(cls, v):
        current_year = datetime.now().year
        if not 1900 <= v <= current_year:
            raise ValueError(f'–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1900 –∏ {current_year}')
        return v

    @field_validator('month')
    @classmethod
    def validate_month(cls, v):
        if not 1 <= v <= 12:
            raise ValueError('–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 12')
        return v

    @field_validator('day')
    @classmethod
    def validate_day(cls, v):
        if not 1 <= v <= 31:
            raise ValueError('–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 31')
        return v

    @field_validator('hour')
    @classmethod
    def validate_hour(cls, v):
        if not 0 <= v <= 23:
            raise ValueError('–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 23')
        return v

    @field_validator('minute')
    @classmethod
    def validate_minute(cls, v):
        if not 0 <= v <= 59:
            raise ValueError('–ú–∏–Ω—É—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 59')
        return v

    @field_validator('lat')
    @classmethod
    def validate_lat(cls, v):
        if not -90 <= v <= 90:
            raise ValueError('–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -90 –¥–æ 90 –≥—Ä–∞–¥—É—Å–æ–≤')
        return v

    @field_validator('lon')
    @classmethod
    def validate_lon(cls, v):
        if not -180 <= v <= 180:
            raise ValueError('–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -180 –¥–æ 180 –≥—Ä–∞–¥—É—Å–æ–≤')
        return v

    @field_validator('city')
    @classmethod
    def validate_city(cls, v):
        if not v or len(v.strip()) < 1:
            raise ValueError('–ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        if len(v) > 100:
            raise ValueError('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤')
        return v.strip()

    @field_validator('nation')
    @classmethod
    def validate_nation(cls, v):
        if not v or len(v.strip()) < 1:
            raise ValueError('–°—Ç—Ä–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π')
        if len(v) > 100:
            raise ValueError('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤')
        return v.strip()

# ============================================================================
# –£–¢–ò–õ–ò–¢–´ –ò –ö–ï–®–ò–†–û–í–ê–ù–ò–ï
# ============================================================================

def get_cache_key(endpoint: str, **params) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫–µ—à–∞ –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
    sorted_params = sorted(params.items())
    param_str = "&".join([f"{k}={v}" for k, v in sorted_params])
    return f"{endpoint}:{param_str}"

def is_cache_valid(cache_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–µ—à–∞"""
    if cache_key not in _cache_timestamps:
        return False
    cache_time = _cache_timestamps[cache_key]
    age = (datetime.now() - cache_time).total_seconds()
    return age < APP_CONFIG["cache_ttl"]

def get_cached_response(cache_key: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    if is_cache_valid(cache_key):
        return _response_cache.get(cache_key)
    return None

def cache_response(cache_key: str, response: Dict):
    """–ö–µ—à–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç"""
    _response_cache[cache_key] = response
    _cache_timestamps[cache_key] = datetime.now()

@lru_cache(maxsize=1000)
def parse_datetime_safe(datetime_str: str) -> datetime:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ datetime —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    return datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö
# ============================================================================

async def validation_error_handler(request: Request, exc: ValueError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    return JSONResponse(
        status_code=400,
        content={
            "error": "validation_error",
            "message": str(exc),
            "details": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        }
    )

async def general_error_handler(request: Request, exc: Exception):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    return JSONResponse(
        status_code=500,
        content={
            "error": "internal_error",
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "details": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        }
    )

# ============================================================================
# LIFESPAN –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    print("üöÄ –ó–∞–ø—É—Å–∫ Ephemeris Decoder v2.0.0")
    initialize_ephemeris()
    print("‚úÖ Swiss Ephemeris –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")
    yield
    # Shutdown
    print("üîÑ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    cleanup_ephemeris()
    print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")

# ============================================================================
# –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

app = FastAPI(
    title=APP_CONFIG["title"],
    description=APP_CONFIG["description"],
    version=APP_CONFIG["version"],
    docs_url=APP_CONFIG["docs_url"],
    redoc_url=APP_CONFIG["redoc_url"],
    lifespan=lifespan
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(SecurityHeadersMiddleware)
app.add_middleware(RateLimitMiddleware, max_requests_per_minute=APP_CONFIG["rate_limit"])
app.add_middleware(AuthenticationMiddleware, excluded_paths=["/docs", "/redoc", "/openapi.json", "/health", "/"])

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
app.add_exception_handler(ValueError, validation_error_handler)
app.add_exception_handler(Exception, general_error_handler)

# ============================================================================
# –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# ============================================================================

@app.get("/", include_in_schema=True)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ API"""
    return {
        "message": "Ephemeris Decoder API v2.0.0",
        "version": APP_CONFIG["version"],
        "status": "operational",
        "docs": "/docs",
        "endpoints": {
            "basic": ["/planets", "/aspects", "/houses", "/moon_phase"],
            "natal": ["/natal_chart"],
            "advanced": ["/transits", "/progressions", "/synastry", "/planetary_strength"],
            "returns": ["/solar_return", "/lunar_return"],
            "directions": ["/primary_directions"],
            "parts": ["/arabic_parts"],
            "admin": ["/admin/keys"]
        },
        "features": {
            "caching": "enabled",
            "authentication": "required",
            "rate_limiting": f"{APP_CONFIG['rate_limit']}/min",
            "swiss_ephemeris": "active"
        }
    }

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Ephemeris Decoder API v2.0.0",
        "status": "running",
        "docs": "/docs",
        "health": "/health"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": APP_CONFIG["title"],
        "version": APP_CONFIG["version"],
        "api_keys_count": len(key_manager.list_keys()),
        "cache_size": len(_response_cache),
        "features": {
            "authentication": "enabled",
            "caching": "enabled",
            "rate_limiting": "enabled"
        }
    }

# ============================================================================
# –ë–ê–ó–û–í–´–ï –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –≠–ù–î–ü–û–ò–ù–¢–´
# ============================================================================

@app.get("/planets")
async def planets(
    datetime_str: str = Query(..., description="–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601"),
    lat: float = Query(..., ge=-90, le=90, description="–®–∏—Ä–æ—Ç–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö"),
    lon: float = Query(..., ge=-180, le=180, description="–î–æ–ª–≥–æ—Ç–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö"),
    extra: bool = Query(False, description="–í–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏"),
    api_key: str = Depends(require_read_permission)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–ª–∞–Ω–µ—Ç —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = get_cache_key("planets", datetime_str=datetime_str, lat=lat, lon=lon, extra=extra)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    cached = get_cached_response(cache_key)
    if cached:
        return cached
    
    try:
        dt = parse_datetime_safe(datetime_str)
        result = await get_planets(dt, lat, lon, extra)
        
        if "error" in result:
            raise HTTPException(status_code=500, detail=result["error"])
        
        # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_response(cache_key, result)
        return result
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")

@app.get("/aspects")
async def aspects(
    datetime_str: str = Query(..., description="–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601"),
    lat: float = Query(..., ge=-90, le=90, description="–®–∏—Ä–æ—Ç–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö"),
    lon: float = Query(..., ge=-180, le=180, description="–î–æ–ª–≥–æ—Ç–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö"),
    api_key: str = Depends(require_read_permission)
):
    """–†–∞—Å—á—ë—Ç –∞—Å–ø–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = get_cache_key("aspects", datetime_str=datetime_str, lat=lat, lon=lon)
    
    cached = get_cached_response(cache_key)
    if cached:
        return cached
    
    try:
        dt = parse_datetime_safe(datetime_str)
        result = await get_aspects(dt, lat, lon)
        
        if "error" in result:
            raise HTTPException(status_code=500, detail=result["error"])
        
        cache_response(cache_key, result)
        return result
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")

@app.get("/houses")
async def houses(
    datetime_str: str = Query(..., description="–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601"),
    lat: float = Query(..., ge=-90, le=90, description="–®–∏—Ä–æ—Ç–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö"),
    lon: float = Query(..., ge=-180, le=180, description="–î–æ–ª–≥–æ—Ç–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö"),
    api_key: str = Depends(require_read_permission)
):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –¥–æ–º–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = get_cache_key("houses", datetime_str=datetime_str, lat=lat, lon=lon)
    
    cached = get_cached_response(cache_key)
    if cached:
        return cached
    
    try:
        dt = parse_datetime_safe(datetime_str)
        result = await get_houses(dt, lat, lon)
        
        if "error" in result:
            raise HTTPException(status_code=500, detail=result["error"])
        
        cache_response(cache_key, result)
        return result
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")

@app.get("/moon_phase")
async def moon_phase(
    datetime_str: str = Query(..., description="–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601"),
    api_key: str = Depends(require_read_permission)
):
    """–†–∞—Å—á—ë—Ç —Ñ–∞–∑—ã –õ—É–Ω—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = get_cache_key("moon_phase", datetime_str=datetime_str)
    
    cached = get_cached_response(cache_key)
    if cached:
        return cached
    
    try:
        dt = parse_datetime_safe(datetime_str)
        result = await get_moon_phase(dt)
        
        if "error" in result:
            raise HTTPException(status_code=500, detail=result["error"])
        
        cache_response(cache_key, result)
        return result
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")

# ============================================================================
# –ù–ê–¢–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê
# ============================================================================

@app.post("/natal_chart")
async def natal_chart(
    request: NatalChartRequest,
    api_key: str = Depends(require_read_permission)
):
    """–†–∞—Å—á—ë—Ç –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è
        is_valid, error_msg = validate_birth_data(
            request.year, request.month, request.day, 
            request.hour, request.minute
        )
        
        if not is_valid:
            raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è: {error_msg}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        timezone = request.timezone or get_timezone_by_coordinates(request.lat, request.lon)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
        result = await calculate_natal_chart(
            year=request.year,
            month=request.month,
            day=request.day,
            hour=request.hour,
            minute=request.minute,
            city=request.city,
            nation=request.nation,
            lat=request.lat,
            lon=request.lon,
            tz_str=timezone
        )
        
        if "error" in result:
            raise HTTPException(status_code=500, detail=result["error"])
        
        return result
        
    except HTTPException:
        raise
    except ValueError as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")

# ============================================================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

if __name__ == "__main__":
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.getenv("PORT", 8000))
    
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=port,
        reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        log_level="info",
        workers=1  # –û–¥–∏–Ω –≤–æ—Ä–∫–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
    )
